name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check System Info
      run: |
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Architecture: $(uname -m)"
        echo "OS: $(uname -s)"
        
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18.18.0'
        architecture: 'x64'

    - name: Set up environment files
      run: |
        # Create production .env file directly from secrets
        echo "NODE_ENV=production" > .env
        echo "PORT=3000" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        
        # Add Google OAuth if using NextAuth with Google
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
        
        # Copy for build process
        cp .env .env.local
        cp .env .env.production
        
        echo "=== Environment file created ==="
        echo "Environment variables configured:"
        grep -E "^[A-Z]" .env | sed 's/=.*/=***/' || echo "No environment variables found"

    - name: Install dependencies
      run: |
        rm -rf node_modules package-lock.json || true
        npm install --legacy-peer-deps
        
    - name: Generate Prisma client
      run: npx prisma generate
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

    - name: Prepare deployment files
      run: |
        # Ensure proper permissions
        chmod -R 755 .next
        chmod 644 package.json
        chmod 644 ecosystem.config.js

    - name: Deploy to DigitalOcean
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DIGITALOCEAN_HOST }}
        username: ${{ secrets.DIGITALOCEAN_USERNAME }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        source: ".next,package.json,package-lock.json,prisma,public,ecosystem.config.js,.env"
        target: "/var/www/rogan-writer/releases/${{ github.sha }}"
        strip_components: 0
        rm: false

    - name: Start application
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DIGITALOCEAN_HOST }}
        username: ${{ secrets.DIGITALOCEAN_USERNAME }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        script: |
          set -e
          echo "=== DEPLOYMENT START ==="
          
          # Create directories if they don't exist
          mkdir -p /var/www/rogan-writer/releases/${{ github.sha }}
          mkdir -p /var/www/rogan-writer/logs
          echo "✅ Directories created"
          
          # Navigate to new release
          cd /var/www/rogan-writer/releases/${{ github.sha }}
          echo "✅ Navigated to release directory: $(pwd)"
          
          # Check what files were deployed
          echo "=== Files in release directory ==="
          ls -la
          
          echo "=== Installing production dependencies ==="
          if npm install --omit=dev --legacy-peer-deps; then
            echo "✅ Dependencies installed successfully"
          else
            echo "❌ Failed to install dependencies"
            exit 1
          fi
          
          echo "=== Running database migrations ==="
          npx prisma migrate deploy || echo "⚠️  Migration failed or no migrations to run"
          
          echo "=== Stopping existing application ==="
          pm2 stop rogan-writer 2>/dev/null || echo "ℹ️  No existing app to stop"
          pm2 delete rogan-writer 2>/dev/null || echo "ℹ️  No existing app to delete"
          
          echo "=== Updating symlink to current release ==="
          rm -f /var/www/rogan-writer/current
          ln -sf /var/www/rogan-writer/releases/${{ github.sha }} /var/www/rogan-writer/current
          echo "✅ Symlink updated"
          
          echo "=== Starting application with PM2 ==="
          cd /var/www/rogan-writer/current
          echo "Current directory: $(pwd)"
          
          # Check if required files exist
          if [ ! -f ecosystem.config.js ]; then
            echo "❌ ERROR: ecosystem.config.js not found!"
            ls -la
            exit 1
          fi
          
          if [ ! -f .env ]; then
            echo "❌ ERROR: .env file not found!"
            ls -la
            exit 1
          fi
          
          echo "✅ Required files found"
          
          # Check Node.js version
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Show environment (first few lines only)
          echo "Environment variables:"
          head -3 .env
          
          # Start the application
          echo "Starting PM2 process..."
          if NODE_ENV=production pm2 start ecosystem.config.js; then
            echo "✅ PM2 start command executed"
          else
            echo "❌ PM2 start failed"
            exit 1
          fi
          
          # Wait for startup
          sleep 15
          
          # Check PM2 status
          echo "=== PM2 STATUS ==="
          pm2 list
          
          # Check if process is actually running
          if pm2 list | grep -q "rogan-writer.*online"; then
            echo "✅ Application is running successfully"
            pm2 save
            echo "✅ PM2 configuration saved"
          else
            echo "❌ Application failed to start"
            echo "PM2 Error logs:"
            pm2 logs rogan-writer --err --lines 20 2>/dev/null || echo "No error logs available"
            echo "PM2 Output logs:"  
            pm2 logs rogan-writer --out --lines 20 2>/dev/null || echo "No output logs available"
            exit 1
          fi
          
          echo "=== DEPLOYMENT SUCCESSFUL ===" 